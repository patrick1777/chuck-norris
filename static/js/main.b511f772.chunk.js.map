{"version":3,"sources":["JokeCard.js","App.js","index.js"],"names":["useStyles","makeStyles","card","marginBottom","cardContent","paddingBottom","cardActions","padding","Category","withStyles","root","marginTop","Chip","JokeCard","joke","index","likeJoke","unlikeJoke","classes","Card","className","id","CardContent","categories","length","map","cat","label","key","variant","Typography","CardActions","form","display","alignItems","justifyContent","margin","width","Spinner","style","textAlign","CircularProgress","App","useState","jokes","setJokes","jokesToShow","setJokesToShow","setCategories","filterCategories","setFilterCategories","likedJokes","setLikedJokes","currentTab","setCurrentTab","firstName","setFirstName","loading","setLoading","useEffect","fetchAndSetJokes","fetch","then","res","json","value","catch","err","console","log","slice","find","j","likedJoke","newLikedJokes","filter","observeElement","bottomJoke","observer","IntersectionObserver","entries","isIntersecting","setTimeout","unobserve","threshold","observe","bottomJokeEl","document","getElementById","toggleCategory","event","category","target","name","includes","filterCategoriesCopy","categoryIndex","indexOf","splice","CssBaseline","Container","align","AppBar","position","Tabs","onChange","centered","Tab","aria-controls","Badge","color","badgeContent","role","hidden","flexDirection","onSubmit","e","preventDefault","noValidate","TextField","Button","type","FormControlLabel","control","Checkbox","checked","jokeCategories","i","categoryMatch","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b511f772.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Button,\n  Card,\n  Chip,\n  CardContent,\n  CardActions,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles, withStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  card: {\n    marginBottom: 20,\n  },\n  cardContent: {\n    paddingBottom: 5,\n  },\n  cardActions: {\n    padding: 16,\n  },\n});\n\nconst Category = withStyles({\n  root: {\n    marginTop: 10,\n    marginBottom: 10,\n  },\n})(Chip);\n\nexport default function JokeCard({ joke, likeJoke, unlikeJoke, index }) {\n  const classes = useStyles();\n  return (\n    <Card className={classes.card} id={`joke-${index}`}>\n      <CardContent className={classes.cardContent}>\n        {joke.categories.length > 0 ? (\n          joke.categories.map((cat) => (\n            <Category label={cat} key={cat} variant='outlined' />\n          ))\n        ) : (\n          <Category label='regular' variant='outlined' />\n        )}\n        <Typography>{joke.joke}</Typography>\n      </CardContent>\n      <CardActions className={classes.cardActions}>\n       \n      </CardActions>\n    </Card>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  Badge,\n  Button,\n  AppBar,\n  CssBaseline,\n  Container,\n  CircularProgress,\n  Tab,\n  Tabs,\n  Typography,\n  TextField,\n  FormControlLabel,\n  Checkbox,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport JokeCard from './JokeCard';\n\nconst useStyles = makeStyles({\n  form: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    '& > *': {\n      margin: 20,\n      width: '25ch',\n    },\n  },\n});\n\nfunction Spinner() {\n  return (\n    <div style={{ textAlign: 'center', padding: '2rem' }}>\n      <CircularProgress />\n    </div>\n  );\n}\n\nfunction App() {\n  const [jokes, setJokes] = useState([]);\n  const [jokesToShow, setJokesToShow] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [filterCategories, setFilterCategories] = useState([]);\n\n  const [likedJokes, setLikedJokes] = useState([]);\n  const [currentTab, setCurrentTab] = useState(0);\n\n  const [firstName, setFirstName] = useState('All');\n  \n  const [loading, setLoading] = useState(false);\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    setLoading(true);\n    fetchAndSetJokes();\n    fetch('https://api.icndb.com/categories')\n      .then((res) => res.json())\n      .then((res) => {\n        setCategories(res.value);\n        setFilterCategories(res.value);\n        setLoading(false);\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  const fetchAndSetJokes = () => {\n    fetch(\n      `https://api.icndb.com/jokes?firstName=${firstName}`\n    )\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res);\n        setJokes(res.value);\n        setJokesToShow(res.value.slice(0, 10));\n        setLoading(false);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const likeJoke = (id) => {\n    if (likedJokes.find((j) => j.id === id)) return;\n    const likedJoke = jokes.find((j) => j.id === id);\n    setLikedJokes([likedJoke, ...likedJokes]);\n  };\n\n  const unlikeJoke = (id) => {\n    const newLikedJokes = likedJokes.filter((j) => j.id !== id);\n    setLikedJokes(newLikedJokes);\n  };\n\n  const changeTab = (event, value) => {\n    setCurrentTab(value);\n  };\n\n  const addMoreJokes = () => {\n    setLoading(true);\n    setTimeout(() => {\n      setJokesToShow(jokes.slice(0, jokesToShow.length + 10));\n      setLoading(false);\n    }, 400);\n  };\n\n  const observeElement = (bottomJoke) => {\n    if (!bottomJoke) return;\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting === true) {\n          addMoreJokes();\n          observer.unobserve(bottomJoke);\n        }\n      },\n      {\n        threshold: 1,\n      }\n    );\n\n    observer.observe(bottomJoke);\n  };\n\n  useEffect(() => {\n    const bottomJokeEl = document.getElementById(\n      `joke-${jokesToShow.length - 1}`\n    );\n    observeElement(bottomJokeEl);\n  }, [jokesToShow]);\n\n  const toggleCategory = (event) => {\n    const category = event.target.name;\n\n    if (filterCategories.includes(category)) {\n      // If found then remove\n      const filterCategoriesCopy = [...filterCategories];\n      const categoryIndex = filterCategoriesCopy.indexOf(category);\n      filterCategoriesCopy.splice(categoryIndex, 1);\n      setFilterCategories(filterCategoriesCopy);\n    } else {\n      // Else add it\n      setFilterCategories([...filterCategories, category]);\n    }\n  };\n\n  const categoryMatch = (jokeCategories) => {\n    for (let i = 0; i < jokeCategories.length; i++) {\n      if (filterCategories.includes(jokeCategories[i])) return true;\n    }\n    return false;\n  };\n\n  const changeName = (e) => {\n    e.preventDefault();\n    if (firstName === '') return;\n    fetchAndSetJokes();\n  };\n\n  return (\n    <div className='App'>\n      <CssBaseline />\n      <Container>\n        <Typography variant='h2' align='center' style={{ margin: 20 }}>\n          Chuck Norris Jokes\n        </Typography>\n        <AppBar style={{ marginBottom: 20 }} position='sticky'>\n          <Tabs value={currentTab} onChange={changeTab} centered>\n            <Tab label='Home' id='home-tab' aria-controls='home-panel' />\n            <Tab\n              label={\n                <Badge\n                  color='secondary'\n                  badgeContent={\n                    likedJokes.length > 0 ? likedJokes.length : null\n                  }\n                >\n                  \n                </Badge>\n              }\n              id='like-tab'\n              aria-controls='like-panel'\n            />\n          </Tabs>\n        </AppBar>\n        <div role='tabpanel' hidden={currentTab !== 0}>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n            }}\n          >\n            <form onSubmit={changeName} noValidate className={classes.form}>\n              <TextField\n                id='firstName'\n                label='Enter Category'\n                value={firstName}\n                onChange={(e) => setFirstName(e.target.value)}\n              />\n              \n              <Button type='submit' variant='contained' color='primary'>\n                Submit\n              </Button>\n            </form>\n          </div>\n          {/* Category filters */}\n          {categories.map((category) => (\n            <FormControlLabel\n              key={category}\n              control={\n                <Checkbox\n                  name={category}\n                  color='primary'\n                  checked={filterCategories.includes(category)}\n                  onChange={toggleCategory}\n                />\n              }\n              label={category}\n            />\n          ))}\n          {/* Joke cards */}\n          {jokesToShow.map((joke, index) => {\n            if (\n              joke.categories.length === 0 ||\n              categoryMatch(joke.categories)\n            ) {\n              return (\n                <JokeCard\n                  key={joke.id}\n                  joke={joke}\n                  likeJoke={likeJoke}\n                  unlikeJoke={unlikeJoke}\n                  index={index}\n                />\n              );\n            }\n          })}\n          {loading && <Spinner />}\n        </div>\n        <div role='tabpanel' hidden={currentTab !== 1}>\n          {likedJokes.map((joke) => (\n            <JokeCard\n              key={joke.id}\n              joke={joke}\n              likeJoke={likeJoke}\n              unlikeJoke={unlikeJoke}\n            />\n          ))}\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}